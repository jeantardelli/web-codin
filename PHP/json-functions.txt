JSON Functions
==============

Apart from a text file, SQL and XML, JSON may be used to store, transport and
manipulate data. An interesting comparison may be made between JSON-encoding and
serialization. While serialization gives control over what to be encoded,
a JSON-encoded string is more readable.

## Encoding

An object or array can be encoded to become a JSONstring:

json_encode($m [,$i1=0 [,$i2=512]]).
  $m can be an object, an array, scalar types or NULL.
  $i1 is a bit mask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS,
  JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_UNESCAPED_UNICODE.
  $i2 is a positive integer representing the maximum depth.

## Decoding

To decode a JSON string $s, use json_decode($s[,$b=false [,$i1=512 [,$i2=0]]]).
  If $b is true, returned objects will be converted into associative arrays.
  $i1 specifies the recursion depth.
  $i2 can be JSON_BIGINT_AS_STRING.

For the JSON strings, the names and string values must be enclosed in double quotes. Single quotes are not allowed.

## Error Handling

json_last_error_msg() returns the error string of the last json_encode() or json_decode() call.

json_last_error() returns an integer which can be JSON_ERROR_{NONE|DEPTH|STATE_MISMATCH|CTRL_CHAR|SYNTAX|UTF8|RECURSION|INF_OR_NAN|UNSUPPORTED_TYPE}.
