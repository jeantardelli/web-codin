An Exception object is thrown when an error occurs. It can be caught in a try block, and handled in a catch block.
More than one catch blocks may be used to catch various exception classes, and the first matching clause will be
used. We can throw our own exceptions.

The thrown object must be an instance of the Exception class or a subclass of Exception. The Exception class has the
following members:

<?phpclass Exception {
	protected $message = 'Unknown exception';
	private $string;
	protected $code = 0;
	protected $file;
	protected $line;
	private $trace;
	private $previous; // previous exception if nested exception

	public function __construct($message = null, $code = 0, Exception $previous = null);
	final private function __clone(); // no cloning of exceptions
	final public function getMessage();
	final public function getCode();
	final public function getFile();
	final public function getLine();
	final public function getTrace(); // an array of the backtrace()
	final public function getPrevious(); // previous exception
	final public function getTraceAsString(); // formatted trace
	public function __toString(); // formatted string for display
	}
?>

Exceptions can be nested. An uncaught inner exception will be thrown to the outer try {...} catch(...){...} block.

An uncaught exception causes a fatal error. Use set_exception_handler($f($e)) to handle any uncaught exceptions. set_exception_handler()
takes in the exception $e, and returns the name of the previously defined exception handler. NULL is returned on error or if no exception
handler was previously defined. If NULL is passed, resetting the handler to its default state, TRUE is returned.
